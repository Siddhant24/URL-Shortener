 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var MongoClient = require('mongodb').MongoClient;
var api = require('./api.js');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}


MongoClient.connect(process.env.MONGO_URL, function(err, db){
  if(err){
    console.log('Unable to connect to the mongoDB server. Error:', err);
  }
  const collection = db.collection(process.env.MONGO_COLLECTION);
  var shorturl = {};
  
  app.use('/public', express.static(process.cwd() + '/public'));

  app.route('/_api/package.json')
    .get(function(req, res, next) {
      console.log('requested');
      fs.readFile(__dirname + '/package.json', function(err, data) {
        if(err) return next(err);
        res.type('txt').send(data.toString());
      });
    });
  
  app.route('/')
      .get(function(req, res) {
		    res.sendFile(process.cwd() + '/views/index.html');
      })
  
  app.get('/new/:url*', function(req, res){
     var url = req.url.slice(5);
    if(api.validateURL(url)){
      shorturl.hash = api.generateHash(url, collection);
      shorturl.original = url;
      api.save(shorturl, collection);
    }
    else{
      shorturl = {error: "Error: wrong URL"};
    }
    res.json(shorturl);
  });
  
  app.get('/:hash', function(req, res){
    var hash = req.params.hash;
    collection.findOne({
      hash: hash
    }, function(err, data){
      if(err){
        console.log('Error in finding saved url in database.Error:', err);
      }
      if(data){
        res.redirect(data.original);
      }
      else{
        res.send({
        "error": "This url is not on the database."
        });
      }
    });
          
  });
  
  // Respond not found to all the wrong routes
  app.use(function(req, res, next){
    res.status(404);
    res.type('txt').send('Not found');
  });
  
   // Error Middleware
  app.use(function(err, req, res, next) {
    if(err) {
      res.status(err.status || 500)
        .type('txt')
        .send(err.message || 'SERVER ERROR');
    }  
  })
  
});


app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

